export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  try {
    // Parse form data from request
    const body = await getFormData(req);
    const { name, email, message, 'g-recaptcha-response': token } = body;

    if (!name || !email || !message || !token) {
      return res.status(400).json({ message: '–ú–æ–ª—è, –ø–æ–ø—ä–ª–Ω–µ—Ç–µ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ –∏ –ø–æ—Ç–≤—ä—Ä–¥–µ—Ç–µ reCAPTCHA.' });
    }

    // Verify reCAPTCHA with Google
    const verifyRes = await fetch('https://www.google.com/recaptcha/api/siteverify', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        secret: process.env.RECAPTCHA_SECRET_KEY,
        response: token,
      }),
    });

    const verifyData = await verifyRes.json();

    if (!verifyData.success || verifyData.score < 0.5 || verifyData.action !== 'contact') {
      return res.status(400).json({ message: 'reCAPTCHA –ø—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –µ –Ω–µ—É—Å–ø–µ—à–Ω–∞. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.' });
    }

    // Everything OK
    console.log('üì® Message received:', { name, email, message });

    return res.status(200).json({ message: '–°—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!' });
  } catch (err) {
    console.error('‚ùå Server error:', err);
    return res.status(500).json({ message: '–°—ä—Ä–≤—ä—Ä–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞ –Ω–∞ —Ñ–æ—Ä–º—É–ª—è—Ä–∞.' });
  }
}

// Helper to parse multipart/form-data (used by FormData)
async function getFormData(req) {
  const buffers = [];
  for await (const chunk of req) {
    buffers.push(chunk);
  }
  const bodyStr = Buffer.concat(buffers).toString();
  const params = new URLSearchParams(bodyStr);
  const data = {};
  for (const [key, value] of params.entries()) {
    data[key] = value;
  }
  return data;
}
