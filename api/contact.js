const axios = require('axios');

module.exports = async (req, res) => {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  const { name, email, message, 'g-recaptcha-response': token } = req.body;

  if (!name || !email || !message || !token) {
    return res.status(400).json({ message: '–í—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ –∏ reCAPTCHA —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏.' });
  }

  try {
    // ‚úÖ Verify token with Google
    const verifyResponse = await axios.post(`https://www.google.com/recaptcha/api/siteverify`, null, {
      params: {
        secret: process.env.RECAPTCHA_SECRET_KEY,
        response: token,
      },
    });

    const { success, score, action } = verifyResponse.data;

    if (!success || score < 0.5 || action !== 'contact') {
      return res.status(400).json({ message: 'reCAPTCHA validation failed. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.' });
    }

    // ‚úÖ Passed reCAPTCHA ‚Äì handle the message
    console.log('üì¨ New form:', { name, email, message });

    return res.status(200).json({ message: '–°—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –±–µ—à–µ –∏–∑–ø—Ä–∞—Ç–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!' });
  } catch (err) {
    console.error('reCAPTCHA error:', err.message);
    return res.status(500).json({ message: '–°—ä—Ä–≤—ä—Ä–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ reCAPTCHA –ø—Ä–æ–≤–µ—Ä–∫–∞.' });
  }
};
